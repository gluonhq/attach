import java.time.Duration

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'de.marcphilipp.nexus-publish'

def nativeLib(buildDir, projectDir, service, osname) {
    return tasks.create("nativeLib${service}${osname}") {
        doLast {
            File lib = nativeBuild("$buildDir", "$projectDir", "$service", "$osname")
            if (lib != null) {
                tasks["jar${service}${osname}"].configure {
                    into("native") {
                        from lib
                    }
                }
            }
        }
    }
}

def jarPackage(buildDir, projectDir, service, osname) {
    return tasks.create("jar${service}${osname}", Jar) {
        dependsOn(build)
        if (osname != "") {
            def nativeTask = nativeLib("$buildDir", "$projectDir", "$service", "$osname")
            dependsOn(nativeTask)
            archiveBaseName = "${service}".toLowerCase()
            archiveClassifier = osname
            into ("") {
                from "${buildDir}/resources/main"
                from "$projectDir/src/$osname/resources/"
                from "${buildDir}/classes/java/main"
                exclude '**/*/impl/Dummy**'
                if (osname == 'desktop') {
                    exclude "**/impl/IOS**", "**/**ios.json", '**/*/impl/Android**', "**/**android.json"
                } else {
                    exclude "**/impl/Desktop**", "**/**darwin.json", "**/**linux.json", "**/**windows.json"
                    if (osname == 'ios') {
                        exclude '**/*/impl/Android**', "**/**android.json"
                    } else if (osname == 'android') {
                        exclude '**/*/impl/IOS**', "**/**ios.json"
                    }
                }
            }
        } else {
            from "${buildDir}/classes/java/main"
            exclude "**/impl/Desktop**", "**/**darwin.json", "**/**linux.json", "**/**windows.json", "**/impl/IOS**", "**/**ios.json", '**/*/impl/Android**', "**/**android.json"
        }
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    archiveClassifier = 'javadoc'
}

publishing {
    publications {
        maven(MavenPublication) {
            def service = getServiceName(project.name)
            if (System.getProperty('os.name').toLowerCase().contains("mac")) {
                artifact jarPackage("$project.buildDir", "$project.projectDir", "${service}", "ios")
            }
            artifact jarPackage("$project.buildDir", "$project.projectDir", "${service}", "android")
            if (service != "Util") {
                artifact jarPackage("$project.buildDir", "$project.projectDir", "${service}", "desktop")
            }
            artifact jarPackage("$project.buildDir", "$project.projectDir", "${service}", "")
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = "Gluon Attach (${project.name})"
                description = "API for accessing ${project.name} features"
                url = 'https://github.com/gluonhq/attach/'

                developers {
                    developer {
                        name = 'Johan Vos'
                        email = 'johan.vos@gluonhq.com'
                        organization = 'Gluon'
                        organizationUrl = 'https://gluonhq.com'
                    }
                    developer {
                        name = 'Joeri Sykora'
                        email = 'joeri.sykora@gluonhq.com'
                        organization = 'Gluon'
                        organizationUrl = 'https://gluonhq.com'
                    }
                    developer {
                        name = 'Erwin Morrhey'
                        email = 'erwin.morrhey@gluonhq.com'
                        organization = 'Gluon'
                        organizationUrl = 'https://gluonhq.com'
                    }
                }

                licenses {
                    license {
                        name = 'The GNU General Public License'
                        url = 'https://opensource.org/licenses/GPL-3.0'
                        distribution = 'repo'
                    }
                }

                scm {
                    connection = 'scm:git:https://github.com/gluonhq/attach.git'
                    developerConnection = 'scm:git:ssh://git@github.com/gluonhq/attach.git'
                    url = 'https://github.com/gluonhq/attach'
                }
            }

            pom.withXml {
                Node pomNode = asNode()
                pomNode.dependencies.'*'.findAll() {
                    it.groupId.text() == 'org.openjfx'
                }.each {
                    it.remove(it.classifier)
                }
            }
        }
    }
}

signing {
    sign publishing.publications.maven
    required = { gradle.taskGraph.hasTask(publish) && !version.endsWith("SNAPSHOT") }
}

private String getServiceName(projectName) {
    if (projectName.contains("-")) { // in-app-billing -> InAppBilling
        def values = projectName.tokenize("-")
        return values.inject("") { name, pn -> name + pn.capitalize()  }
    }
    return projectName.capitalize()
}

nexusPublishing {
    repositories {
        sonatype()
    }
    // credentials are shared from staging plugin
    clientTimeout = Duration.ofMinutes(5)
    connectTimeout = Duration.ofMinutes(5)
}
